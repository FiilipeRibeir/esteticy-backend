generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid()) @db.Uuid
  email            String             @unique
  name             String
  nickname         String
  status           Boolean            @default(true)
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  Appointment      Appointment[]      @relation("UserAppointments")
  Work             Work[]             @relation("UserWorks")
  Payment          Payment[]          @relation("UserPayments")
  MercadoPagoToken MercadoPagoToken[]

  @@map("users")
}

model Client {
  id        String    @id @default(uuid()) @db.Uuid
  email     String    @unique
  name      String
  phone     String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("client")
}

model Appointment {
  id            String            @id @default(uuid()) @db.Uuid
  userId        String            @db.Uuid
  user          User              @relation("UserAppointments", fields: [userId], references: [id])
  workId        String            @db.Uuid
  work          Work              @relation(fields: [workId], references: [id])
  title         String
  date          DateTime
  status        AppointmentStatus @default(PENDENTE)
  paymentStatus PaymentStatus     @default(PENDENTE)
  paidAmount    Float             @default(0)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  Payment       Payment[]         @relation("AppointmentPayments")

  @@map("appointments")
}

model Work {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String        @db.Uuid
  user        User          @relation("UserWorks", fields: [userId], references: [id])
  name        String
  description String?
  price       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Appointment Appointment[]

  @@map("work")
}

model Payment {
  id            String        @id @default(uuid()) @db.Uuid
  userId        String        @db.Uuid
  user          User          @relation("UserPayments", fields: [userId], references: [id])
  appointmentId String        @db.Uuid
  appointment   Appointment   @relation("AppointmentPayments", fields: [appointmentId], references: [id])
  amount        Float
  status        PaymentStatus @default(PENDENTE)
  method        String
  transactionId String        @unique
  expiresAt     DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

model MercadoPagoToken {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @unique @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String
  refreshToken String
  expiresAt    DateTime

  @@map("mptoken")
}

model MercadoPagoSession {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  state        String   @unique
  codeVerifier String
  createdAt    DateTime @default(now())

  @@map("mptokensession")
}

enum AppointmentStatus {
  CANCELADO
  PENDENTE
  CONCLUIDO
}

enum PaymentStatus {
  PENDENTE
  CONFIRMADO
}
